What Is the Point of Refactoring if Behavior
Doesn’t Change?
The point is to improve quality while preserving behavior. This is not to say that
fixing bugs in broken code and creating new features (writing new code) are not
important. In fact, these two types of tasks are tied more closely to business objectives, and are likely to receive much more direct attention from project/
product managers than concerns about the quality of the codebase. However,
those actions are both about changing behavior and therefore are distinct from
refactoring.
We now have two more items to address. First, why is quality important, in
the context of “getting things done”? And second, what is quality, and how does
refactoring contribute to it?
Balancing Quality and Getting Things Done
It may seem as though everyone and every project operates on a simple spectrum between quality and getting things done. On the one end, you have a
“beautiful” codebase that doesn’t do anything of value. And on the other hand,
you have a codebase that tries to support many features, but is full of bugs and
half-completed ideas.
A metaphor that has gained popularity in the last 20 years is that of technical
debt. Describing things this way puts code into a pseudofinancial lingo that
noncoders can understand easily, and facilitates a more nuanced conversation
about how quickly tasks can and should be done.
The aforementioned spectrum of quality to speed is accurate to a degree. On
small projects, visible and addressable technical debt may be acceptable. As a
project grows, however, quality becomes increasingly important.